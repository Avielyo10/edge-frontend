import React, { useContext, useState, Suspense } from 'react';
import { useRouteMatch } from 'react-router-dom';
import { RegistryContext } from '../../store';
import { Button, Bullseye, Spinner } from '@patternfly/react-core';
import AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';
import { useHistory } from 'react-router-dom';
import PropTypes from 'prop-types';

const UpdateImageWizard = React.lazy(() =>
  import('../ImageManager/UpdateImageWizard')
);

const VulnerabilityTab = ({ imageId }) => {
  const [isUpdateWizardOpen, setIsUpdateWizardOpen] = useState(false);
  const { params } = useRouteMatch('/fleet-management/:inventoryId');
  const { getRegistry } = useContext(RegistryContext);
  const history = useHistory();

  const openUpdateWizard = () => {
    history.push({
      pathname: history.location.pathname,
      search: new URLSearchParams({
        update_image: true,
      }).toString(),
    });
    setIsUpdateWizardOpen(true);
  };

  return (
    <>
      <AsyncComponent
        appName="vulnerability"
        module="./SystemDetail"
        getRegistry={getRegistry}
        customItnlProvider
        entity={{ id: params.inventoryId }}
        canSelect={false}
        canEditStatus={false}
        canManageColumns={false}
        linkAdvisoriesToCustomerPortal
        defaultColumns={[
          'synopsis',
          'public_date',
          'impact',
          'cvss_score',
          'advisory',
        ]}
        filters={[
          'filter',
          'security_rule',
          'known_exploit',
          'impact',
          'cvss_score',
          'advisory',
        ]}
        customAction={(cve) => (
          <Button
            onClick={openUpdateWizard}
            variant="primary"
            isDisabled={!imageId || !cve?.meta?.cvesCount > 0}
          >
            Update image
          </Button>
        )}
      />
      {isUpdateWizardOpen && (
        <Suspense
          fallback={
            <Bullseye>
              <Spinner />
            </Bullseye>
          }
        >
          <UpdateImageWizard
            navigateBack={() => {
              history.push({ pathname: history.location.pathname });
              setIsUpdateWizardOpen(false);
            }}
            updateImageID={imageId}
          />
        </Suspense>
      )}
    </>
  );
};

VulnerabilityTab.propTypes = {
  imageId: PropTypes.string,
};

export default VulnerabilityTab;
