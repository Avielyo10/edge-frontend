import React, { useContext, useEffect, useState } from 'react';
import { useRouteMatch } from 'react-router-dom';
import { RegistryContext } from '../../store';
import AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';
import { Alert, Button } from '@patternfly/react-core';
import PropTypes from 'prop-types';
import Main from '@redhat-cloud-services/frontend-components/Main';
import { InProgressIcon } from '@patternfly/react-icons';
import UpdateImageModal from './UpdateImageModal';

const getActiveAlert = (CVEs, systemProfile, prevState) => {
  if (CVEs?.isLoading || CVEs?.meta?.filter || !systemProfile?.system_profile) {
    return prevState;
  }
  if (!CVEs?.data?.length > 0) {
    return 'noAlert';
  }
  if (
    systemProfile?.system_profile?.status === 'BUILDING' ||
    systemProfile?.system_profile?.status === 'CREADTED'
  ) {
    return 'systemUpdating';
  }
  if (
    systemProfile?.system_profile?.image_data?.ImageInfo?.UpdatesAvailable
      ?.length > 0
  ) {
    return 'updateDevice';
  }
  if (
    systemProfile?.system_profile?.image_data?.UpdateTransactions?.[
      systemProfile?.system_profile?.image_data?.UpdateTransactions?.length - 1
    ] === 'BUILDING'
  ) {
    return 'imageBuilding';
  }
  return 'updateImage';
};

const VulnerabilityTab = ({
  systemProfile,
  setUpdateModal,
  imageId,
  setReload,
}) => {
  const { params } = useRouteMatch('/fleet-management/:inventoryId');
  const { getRegistry } = useContext(RegistryContext);
  const [updateCveModal, setUpdateCveModal] = useState({
    isOpen: false,
    imageId: null,
    cveCount: 0,
  });
  const [CVEs, setCVEs] = useState(null);
  const [activeAlert, setActiveAlert] = useState('noAlert');

  useEffect(() => {
    setUpdateCveModal((prevState) => ({ ...prevState, imageId: imageId }));
  }, [imageId]);

  useEffect(() => {
    !CVEs?.isLoading &&
      !CVEs?.meta?.filter &&
      setUpdateCveModal((prevState) => ({
        ...prevState,
        cveCount: CVEs?.data?.length,
      }));

    setActiveAlert((prevState) =>
      getActiveAlert(CVEs, systemProfile, prevState)
    );
  }, [CVEs, systemProfile]);

  const handleUpdateImageButton = () => {
    setUpdateCveModal((preState) => ({
      ...preState,
      isOpen: true,
    }));
  };

  const handleUpdateDeviceButton = () => {
    setUpdateModal((preState) => ({
      ...preState,
      isOpen: true,
    }));
  };

  const alerts = {
    updateImage: (
      <Alert
        className="pf-u-mb-md"
        variant="info"
        isInline
        title="To remediate CVEs, update the image."
        actionLinks={
          <Button
            className="pf-u-mt-sm"
            isSmall
            onClick={handleUpdateImageButton}
          >
            Update Image
          </Button>
        }
      />
    ),
    imageBuilding: (
      <Alert
        className="pf-u-mb-md"
        customIcon={<InProgressIcon />}
        variant="info"
        isInline
        title="Image build in progress. Once completed, you'll need to update your device."
      />
    ),
    updateDevice: (
      <Alert
        className="pf-u-mb-md"
        variant="warning"
        isInline
        title=" Image build completed. Update device to the newest image version to remediate CVEs."
        actionLinks={
          <Button
            className="pf-u-mt-sm"
            isSmall
            onClick={handleUpdateDeviceButton}
          >
            Update Device
          </Button>
        }
      />
    ),
    systemUpdating: (
      <Alert
        className="pf-u-mb-md"
        customIcon={<InProgressIcon />}
        variant="info"
        isInline
        title="Device updating. No additional actions required."
      />
    ),
    noAlert: <></>,
  };

  return (
    <>
      <Main>
        {alerts[activeAlert]}
        <AsyncComponent
          appName="vulnerability"
          module="./SystemDetail"
          getRegistry={getRegistry}
          customIntlProvider
          entity={{ id: params.inventoryId }}
          canSelect={false}
          canEditStatus={false}
          canManageColumns={false}
          linkToCustomerPortal
          defaultColumns={[
            'synopsis',
            'public_date',
            'impact',
            'cvss_score',
            'advisory',
          ]}
          filters={[
            'filter',
            'security_rule',
            'known_exploit',
            'impact',
            'cvss_score',
            'advisory',
          ]}
          customAction={(cve) => {
            setCVEs(cve);
          }}
        />
      </Main>
      {updateCveModal.isOpen && (
        <UpdateImageModal
          updateCveModal={updateCveModal}
          setUpdateCveModal={setUpdateCveModal}
          setReload={setReload}
        />
      )}
    </>
  );
};

VulnerabilityTab.propTypes = {
  imageId: PropTypes.string,
  systemProfile: PropTypes.object,
  setUpdateModal: PropTypes.func,
  setReload: PropTypes.bool,
};

export default VulnerabilityTab;
